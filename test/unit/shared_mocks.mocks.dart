// Mocks generated by Mockito 5.4.2 from annotations
// in worldtimes/test/unit/shared_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i2;
import 'package:endpoint_layer/utils/constants/auth_endpoint.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:network_layer/utils/exceptions/custom_exception.dart' as _i6;
import 'package:worldtimes/core/models/news_response_model.dart' as _i3;
import 'package:worldtimes/core/repository/news_repository/i_news_repository.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMeta_1 extends _i1.SmartFake implements _i3.Meta {
  _FakeMeta_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [INewsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockINewsRepository extends _i1.Mock implements _i4.INewsRepository {
  MockINewsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i3.NewsResponseModel, _i6.CustomException>> getNews({
    required _i7.NewsEndpoints? type,
    Map<String, dynamic>? queryParams,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNews,
          [],
          {
            #type: type,
            #queryParams: queryParams,
          },
        ),
        returnValue: _i5.Future<
                _i2.Either<_i3.NewsResponseModel, _i6.CustomException>>.value(
            _FakeEither_0<_i3.NewsResponseModel, _i6.CustomException>(
          this,
          Invocation.method(
            #getNews,
            [],
            {
              #type: type,
              #queryParams: queryParams,
            },
          ),
        )),
      ) as _i5.Future<_i2.Either<_i3.NewsResponseModel, _i6.CustomException>>);
}

/// A class which mocks [NewsResponseModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewsResponseModel extends _i1.Mock implements _i3.NewsResponseModel {
  MockNewsResponseModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Meta get meta => (super.noSuchMethod(
        Invocation.getter(#meta),
        returnValue: _FakeMeta_1(
          this,
          Invocation.getter(#meta),
        ),
      ) as _i3.Meta);
  @override
  set meta(_i3.Meta? _meta) => super.noSuchMethod(
        Invocation.setter(
          #meta,
          _meta,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i3.NewsData> get newsData => (super.noSuchMethod(
        Invocation.getter(#newsData),
        returnValue: <_i3.NewsData>[],
      ) as List<_i3.NewsData>);
  @override
  set newsData(List<_i3.NewsData>? _newsData) => super.noSuchMethod(
        Invocation.setter(
          #newsData,
          _newsData,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [Meta].
///
/// See the documentation for Mockito's code generation for more information.
class MockMeta extends _i1.Mock implements _i3.Meta {
  MockMeta() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get found => (super.noSuchMethod(
        Invocation.getter(#found),
        returnValue: 0,
      ) as int);
  @override
  set found(int? _found) => super.noSuchMethod(
        Invocation.setter(
          #found,
          _found,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get returned => (super.noSuchMethod(
        Invocation.getter(#returned),
        returnValue: 0,
      ) as int);
  @override
  set returned(int? _returned) => super.noSuchMethod(
        Invocation.setter(
          #returned,
          _returned,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get limit => (super.noSuchMethod(
        Invocation.getter(#limit),
        returnValue: 0,
      ) as int);
  @override
  set limit(int? _limit) => super.noSuchMethod(
        Invocation.setter(
          #limit,
          _limit,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get page => (super.noSuchMethod(
        Invocation.getter(#page),
        returnValue: 0,
      ) as int);
  @override
  set page(int? _page) => super.noSuchMethod(
        Invocation.setter(
          #page,
          _page,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<String, dynamic> toJson() => (super.noSuchMethod(
        Invocation.method(
          #toJson,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);
}

/// A class which mocks [Exception].
///
/// See the documentation for Mockito's code generation for more information.
class MockException extends _i1.Mock implements Exception {
  MockException() {
    _i1.throwOnMissingStub(this);
  }
}
